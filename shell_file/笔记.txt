3 天

	shell语法

	手工部署代码

	脚本部署项目

	1、shell

		1.1 什么是shell（重点）

			Shell 是一个命令解释器，本身是一个程序，/bin/bash，可以解释linux中的各种命令

			查看linux中默认的shell

				echo $SHELL

			第一个shell程序

				#!/bin/bash
			   
			    echo "hello"
			   
			    pwd

		1.2 shell 执行方式

			1： bash hello.sh(最常使用)
			2： 文件路径 ./hello.sh(文件有可执行权限)
				前2种会新开进程，不能共享环境，不能共享变量

			（重点）3： source hello.sh 或 . hello.sh   不会新开进程，能与当前shell窗口共享进程，共享环境，共享变量

		1.3 本地变量

			1：name=laowang   ,值必须是一个整体，不能有特殊符号
			2：name='lao wang $age'   不会解析里面的内容，原样输出
			3：name="lao wang $age"   先解析变量，拼接返回新结构


			不是纯数字，使用""
			纯数字，age=20

		1.4 命令变量（重点）

			1：a=`pwd`   反引号，把反引号里面命令执行，把指向的结果赋值给变量
			2：a=$(ls)   （最常使用）

		1.5 全局变量

			全局变量就是：当前shell以及其派生出来的子shell中都有效的变量。


			1：name="wang"   export name
			2：export name="wang"

			想让全局变量在任何的命令行中有效，需要修改/etc/profile文件，export name="wang"追加到末尾
			在某个命令行执行source /etc/profile，name全局变量在当前窗口有效，其他窗口还是没效果
			重启电脑，所有的窗口都有name全局变量

			用户目录下的.bashrc，里面的变量只对某个用户有效

			/etc/profile，里面的变量只对所有用户有效

		1.6 查看变量

			方式一：
			$变量名
			场景：
				私下里，在命令行/脚本中使用
				图省事
			方式二：
				"$变量名"
				场景：
					私下里，在命令行/脚本中使用
					图省事
			方式三：
				${变量名}
				场景：
					echo " hello ${变量名} world "
			
			方式四：
				"${变量名}"
				场景：
					标准使用方式

		1.7 删除变量

			unset 变量名

		1.8 内置变量（重点）

			$0 : 获取当前脚本的文件名称

			$# ： 获取执行脚本时传入的参数个数

			$n :  $1...$9 获取的是第几个参数，参数个数大于9，使用${10}

			$? : 获取上一条命令的结果，0代表正确，非0是错误，如果上一条命令时执行一个文件（bash hello.sh），获取的是文件的最后一条命令的结果

		1.9 字符串截取

			python@ubuntu:~/Desktop/code$ name="abcdefg"
			python@ubuntu:~/Desktop/code$ echo ${name}
			abcdefg
			python@ubuntu:~/Desktop/code$ echo ${name:0:3}
			abc
			python@ubuntu:~/Desktop/code$ echo ${name::3}
			abc
			python@ubuntu:~/Desktop/code$ echo ${name:-5:3}
			abcdefg
			python@ubuntu:~/Desktop/code$ echo ${name:0-5:3}

		1.10 默认值

			1：${变量名:-默认值} 变量如果有值，使用自己的值，如果没有值，使用默认值
			2：${变量名+默认值}  变量不管有没有值，使用默认值

			python@ubuntu:~/Desktop/code$ echo $age

			python@ubuntu:~/Desktop/code$ echo ${age:-18}
			18
			python@ubuntu:~/Desktop/code$ echo $age

			python@ubuntu:~/Desktop/code$ echo ${age:-18}
			18
			python@ubuntu:~/Desktop/code$ age=20
			python@ubuntu:~/Desktop/code$ echo $age
			20
			python@ubuntu:~/Desktop/code$ echo ${age:-18}
			20
			python@ubuntu:~/Desktop/code$ echo ${age+18}
			18

		1.11 测试语句（重点）

			1：test 表达式    表达式中的符号左右必须有空格
			2：[ 表达式 ]     中括号左右都需要空格，表达式中的符号左右必须有空格

			[ 1 = 1 ] 使用echo $? 获取结果，0是条件成立，1是条件不成立

		1.12 逻辑表达式（重点）

			条件1 && 条件2   条件1成立，条件2才会执行

			条件1 || 条件2   条件1不成立，条件2才会执行

			python@ubuntu:~/Desktop/code$ [ 1 = 1 ] && echo "前面成立"
			前面成立
			python@ubuntu:~/Desktop/code$ [ 1 = 2 ] && echo "前面成立"
			python@ubuntu:~/Desktop/code$ [ 1 = 2 ] || echo "前面不成立"
			前面不成立
			python@ubuntu:~/Desktop/code$ [ 1 = 1 ] || echo "前面不成立"


			文件相关

			[ -f hello.sh ]  是否是文件
			[ -d abc ]       是否是目录
			[ -x hello.sh ]  是否可执行

			数值操作符

			主要根据给定的两个值，判断第一个与第二个数的关系，如是否大于、小于、等于第二个数。常见选项如下：
			n1 -eq n2            相等
			n1 -ge n2            大于或等于
			n1 -gt n2            大于
			n1 -le n2            小于等于
			n1 -lt n2            小于
			n1 -ne n2            不等于

			字符串比较

			str1 == str2			str1和str2字符串内容一致
			str1 != str2			str1和str2字符串内容不一致，!表示相反的意思

		1.13 数学计算

			1：$((运算))   echo $((2+1))
			2: let        let a=a+1

		1.14 linux常见符号（重点）

			>  ： 表示将符号左侧的内容，以覆盖的方式输入到右侧文件中

			>>  ： 表示将符号左侧的内容，以追加的方式输入到右侧文件的末尾行中

				echo "hello world" > hello.txt


			|  ： 管道符左侧命令1 执行后的结果，传递给管道符右侧的命令2使用

				env | grep SHELL

			&  ： 就是将一个命令从前台转到后台执行

				sleep 10 &

				还有一个作用相当于引用
				bash ceshi.sh > ceshi-all 2>&1 作用等于 bash ceshi.sh 1>ceshi-all 2>&1
				把 bash ceshi.sh 执行的结果，正确的和错误的信息都输出到 ceshi-all 文件中

			/dev/null 是linux下的一个设备文件，这个文件类似于一个垃圾桶，特点是：容量无限大

				ping www.baidu.com >/dev/null 2>&1 &
				在后台运行ping命令，正确和错误的信息都输出到垃圾桶


		1.15 shell编程的四剑客（重点）

			grep [参数] <文件名>

				grep -c aaa grep.txt  显示匹配的个数

				grep -in aaa grep.txt  显示行号，i指忽略大小写

				grep -ivn aaa grep.txt  v，反向查找，除了匹配的内容，其余的都显示出来

			find [路径] [参数] [关键字]

				find ../day1/ -name "test.txt"  根据名称查找目录下的文件

				find ../day1/ -type f 			查找目录下的文件

				find ../day1/ -type d  			查询目录下的文件夹


			sed [参数] '<匹配条件> [动作]' [文件名]

				动作详解
					a		在匹配到的内容下一行增加内容
					i		在匹配到的内容上一行增加内容
					d		删除匹配到的内容
					s		替换匹配到的内容


				sed -i '1s#SED#sed#2' sed.txt （-i代表真正的编辑文件）

					'1s#SED#sed#2'	（前两个#中间代表查找的内容，后两个#中间代表把查找的内容替换成什么）
									（s代表替换，s前写行号，如果不写行号代表所有行）
									（2代表列，如果写成g代表所有列，如果不写代表第1列）

				sed -i '行号a\增加的内容' 文件名

					sed -i '1,2a\hello' sed.txt		（a代表在当前行下追加一行）
													（a前面的数字代表，在哪一行后面追加，1,2代表1到2行后都追加一行）

				sed -i '行号i\增加的内容' 文件名

					sed -i '2,4i\world' sed.txt		（i代表在当前行前插入一行）
													（前面插入前面的数字代表，在哪一行后面追加，1,2代表1到2行后前插入一行）

				sed -i '行号d' 文件名

					sed -i '1,3d' sed.txt			（d代表删除，前面的数字是删除哪些行）


			awk [参数] '[ 动作]' [文件名]

				nihao awk awk awk

				awk '{print $1,$2,$4}' awk2.txt  （把内容按照空格或tab分成多列数据，print输出指定的列）

				root:x:0:0:root:/root:/bin/bash

				awk -F ':' '{print $1,$2,$6}' awk2.txt  （-F指按照‘:’把数据分成多列）

				awk 'BEGIN{FS=":";OFS="---"} {print $1,$2,$6}' awk2.txt  （FS指按照‘:’把数据分成多列，OFS指输出数据时的分隔符）

		1.16 if语句

			if [ 条件 ]
			then
			  	指令
			fi

				  1 #!/bin/bash
				  2 
				  3 if [ "$1" == "nan" ]
				  4 then
				  5     echo "input is nan"
				  6 fi



			if [ 条件 ]
			then
			  	指令1
			else
			 	指令2
			fi

				  # 把用户输入的内容保存到变量中，相当于python的input
				  3 read -p "input name : " username  
				  4 if [ "${username}" == "luban" ]
				  5 then
				  6     echo "login success"
				  7 else
				  8     echo "login failed"
				  9 fi


			if [ 条件 ]
			then
			  	指令1
			elif [ 条件2 ]
			then
			 	指令2
			else
			 	指令3
			fi

				  3 read -p "input name : " username
				  4 if [ "${username}" == "luban" ]
				  5 then
				  6     echo "login success"
				  7 elif [ "${username}" == "qihao" ]
				  8 then
				  9     echo "login success2"
				 10 else
				 11     echo "login failed"
				 12 fi

		1.17 case语句

			case 变量名 in
			   值1)
			      指令1
			         ;;
			   值2)
			      指令2
			         ;;
			   值3)
			 	  指令3
			         ;;
			esac

					  3 read -p "input name : " username
					  4 
					  5 case $username in
					  6     "luban")
					  7         echo "success"
					  8         ;;   # 结束当前case语句，相当于python的break
					  9     "qihao")
					 10         echo "success2"
					 11         ;;
					 12     *)       # 前面条件都不符号，肯定会符号*，相当于else的效果
					 13         echo "failed"



		1.18 for循环


			for 值 in 列表
			do
			   执行语句
			done

				1:
					  # 遍历当前目录
					  4 for file in $(ls)
					  5 do
					  6     echo "file name : ${file}"
					  7 done

				2:
					  3 # 遍历数组[1,2,3]
					  4 for num in $(seq 5)
					  5 do
					  6     echo "num : ${num}"
					  7 done

		1.19 while循环

			while 条件
			do
			   执行语句
			done

					  3 coun=0
					  4 while [ $coun -le 5 ] 
					  5 do  
					  6     echo "${coun}"
					  7     coun=$((coun+1))
					  8 done

		1.20 函数

			函数名(){
				函数体
			}

			函数名


					  # 获取执行文件时传递的参数
					  4 echo "参数#: $#"
					  5 echo "参数1: $1"
					  6 echo "参数2: $2"
					  7 echo "-------------"
					  8 hello(){
					  9 echo "hello"
					 10 echo "world"
					 11 echo "参数0: $0"
					 12 
					 13 # 获取执行函数时传递的参数
					 14 echo "参数#: $#"
					 15 echo "参数1: $1"
					 16 echo "参数2: $2"
					 17 }
					 18 
					 19 hello d e f
					 20	hello $1 $2  # 把执行文件传递的参数，中传递到函数中

					 	python@ubuntu:~/Desktop/code$ bash hanshu.sh a b c
						参数#: 3
						参数1: a
						参数2: b
						-------------
						hello
						world
						参数0: hanshu.sh
						参数#: 3
						参数1: d
						参数2: e

					（重点）使用source hanshu.sh，把脚本中的函数，在当前shell环境中都能直接调用

		2 发布代码

			2.1 Ubuntu 开启root用户

					sudo passwd root

			2.2 ssh 连接远端Linux

					Ubuntu 默认不让远程使用root用户连接

						1、vi /etc/ssh/sshd_config
						2、找到此句  #PermitRootLogin prohibit-password
						   改为 PermitRootLogin yes
						3、service ssh restart


					linux 连接linux  ssh root@192.168.133.252

					windows 连接linux ，安装xshell软件，配置ip和用户名、密码

			2.3 远端linux上传下载

				windows 连接linux，上传下载

					1、使用xshell连接linux
					2、进入linux某个目录
					3、上传 rz（前提 apt install lrzsz），下载 sz 要下载的文件

				linux互相上传下载

					scp root@192.168.133.253:/data/hello .  下载
					scp test root@192.168.133.253:/data     上传







